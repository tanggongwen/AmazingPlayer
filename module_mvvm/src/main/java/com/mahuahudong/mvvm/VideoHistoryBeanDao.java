package com.mahuahudong.mvvm;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mahuahudong.mvvm.databean.VideoHistoryBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIDEO_HISTORY_BEAN".
*/
public class VideoHistoryBeanDao extends AbstractDao<VideoHistoryBean, Void> {

    public static final String TABLENAME = "VIDEO_HISTORY_BEAN";

    /**
     * Properties of entity VideoHistoryBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Vid = new Property(0, String.class, "vid", false, "VID");
        public final static Property Pic = new Property(1, String.class, "pic", false, "PIC");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property TimeStamp = new Property(3, long.class, "timeStamp", false, "TIME_STAMP");
    }


    public VideoHistoryBeanDao(DaoConfig config) {
        super(config);
    }
    
    public VideoHistoryBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIDEO_HISTORY_BEAN\" (" + //
                "\"VID\" TEXT," + // 0: vid
                "\"PIC\" TEXT," + // 1: pic
                "\"NAME\" TEXT," + // 2: name
                "\"TIME_STAMP\" INTEGER NOT NULL );"); // 3: timeStamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIDEO_HISTORY_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VideoHistoryBean entity) {
        stmt.clearBindings();
 
        String vid = entity.getVid();
        if (vid != null) {
            stmt.bindString(1, vid);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(2, pic);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getTimeStamp());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VideoHistoryBean entity) {
        stmt.clearBindings();
 
        String vid = entity.getVid();
        if (vid != null) {
            stmt.bindString(1, vid);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(2, pic);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getTimeStamp());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public VideoHistoryBean readEntity(Cursor cursor, int offset) {
        VideoHistoryBean entity = new VideoHistoryBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // vid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pic
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getLong(offset + 3) // timeStamp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VideoHistoryBean entity, int offset) {
        entity.setVid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPic(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTimeStamp(cursor.getLong(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(VideoHistoryBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(VideoHistoryBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(VideoHistoryBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
