package com.mahuahudong.mvvm;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mahuahudong.mvvm.databean.UserEventBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_EVENT_BEAN".
*/
public class UserEventBeanDao extends AbstractDao<UserEventBean, Void> {

    public static final String TABLENAME = "USER_EVENT_BEAN";

    /**
     * Properties of entity UserEventBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, String.class, "userId", false, "USER_ID");
        public final static Property AccessSrc = new Property(1, String.class, "accessSrc", false, "ACCESS_SRC");
        public final static Property DeviceId = new Property(2, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property DeviceType = new Property(3, String.class, "deviceType", false, "DEVICE_TYPE");
        public final static Property Brand = new Property(4, String.class, "brand", false, "BRAND");
        public final static Property DeviceOs = new Property(5, String.class, "deviceOs", false, "DEVICE_OS");
        public final static Property OsVer = new Property(6, String.class, "osVer", false, "OS_VER");
        public final static Property AppVer = new Property(7, String.class, "appVer", false, "APP_VER");
        public final static Property Carrier = new Property(8, String.class, "carrier", false, "CARRIER");
        public final static Property ConnType = new Property(9, String.class, "connType", false, "CONN_TYPE");
        public final static Property GpsXy = new Property(10, String.class, "gpsXy", false, "GPS_XY");
        public final static Property GpsType = new Property(11, String.class, "gpsType", false, "GPS_TYPE");
        public final static Property IpAddr = new Property(12, String.class, "ipAddr", false, "IP_ADDR");
        public final static Property ContentType = new Property(13, String.class, "contentType", false, "CONTENT_TYPE");
        public final static Property ColumnId = new Property(14, String.class, "columnId", false, "COLUMN_ID");
        public final static Property ContentId = new Property(15, String.class, "contentId", false, "CONTENT_ID");
        public final static Property AccessTime = new Property(16, String.class, "accessTime", false, "ACCESS_TIME");
        public final static Property StayTime = new Property(17, String.class, "stayTime", false, "STAY_TIME");
        public final static Property EndTime = new Property(18, String.class, "endTime", false, "END_TIME");
        public final static Property ExtendField = new Property(19, String.class, "extendField", false, "EXTEND_FIELD");
    }


    public UserEventBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserEventBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_EVENT_BEAN\" (" + //
                "\"USER_ID\" TEXT," + // 0: userId
                "\"ACCESS_SRC\" TEXT," + // 1: accessSrc
                "\"DEVICE_ID\" TEXT," + // 2: deviceId
                "\"DEVICE_TYPE\" TEXT," + // 3: deviceType
                "\"BRAND\" TEXT," + // 4: brand
                "\"DEVICE_OS\" TEXT," + // 5: deviceOs
                "\"OS_VER\" TEXT," + // 6: osVer
                "\"APP_VER\" TEXT," + // 7: appVer
                "\"CARRIER\" TEXT," + // 8: carrier
                "\"CONN_TYPE\" TEXT," + // 9: connType
                "\"GPS_XY\" TEXT," + // 10: gpsXy
                "\"GPS_TYPE\" TEXT," + // 11: gpsType
                "\"IP_ADDR\" TEXT," + // 12: ipAddr
                "\"CONTENT_TYPE\" TEXT," + // 13: contentType
                "\"COLUMN_ID\" TEXT," + // 14: columnId
                "\"CONTENT_ID\" TEXT," + // 15: contentId
                "\"ACCESS_TIME\" TEXT," + // 16: accessTime
                "\"STAY_TIME\" TEXT," + // 17: stayTime
                "\"END_TIME\" TEXT," + // 18: endTime
                "\"EXTEND_FIELD\" TEXT);"); // 19: extendField
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_EVENT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserEventBean entity) {
        stmt.clearBindings();
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(1, userId);
        }
 
        String accessSrc = entity.getAccessSrc();
        if (accessSrc != null) {
            stmt.bindString(2, accessSrc);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(3, deviceId);
        }
 
        String deviceType = entity.getDeviceType();
        if (deviceType != null) {
            stmt.bindString(4, deviceType);
        }
 
        String brand = entity.getBrand();
        if (brand != null) {
            stmt.bindString(5, brand);
        }
 
        String deviceOs = entity.getDeviceOs();
        if (deviceOs != null) {
            stmt.bindString(6, deviceOs);
        }
 
        String osVer = entity.getOsVer();
        if (osVer != null) {
            stmt.bindString(7, osVer);
        }
 
        String appVer = entity.getAppVer();
        if (appVer != null) {
            stmt.bindString(8, appVer);
        }
 
        String carrier = entity.getCarrier();
        if (carrier != null) {
            stmt.bindString(9, carrier);
        }
 
        String connType = entity.getConnType();
        if (connType != null) {
            stmt.bindString(10, connType);
        }
 
        String gpsXy = entity.getGpsXy();
        if (gpsXy != null) {
            stmt.bindString(11, gpsXy);
        }
 
        String gpsType = entity.getGpsType();
        if (gpsType != null) {
            stmt.bindString(12, gpsType);
        }
 
        String ipAddr = entity.getIpAddr();
        if (ipAddr != null) {
            stmt.bindString(13, ipAddr);
        }
 
        String contentType = entity.getContentType();
        if (contentType != null) {
            stmt.bindString(14, contentType);
        }
 
        String columnId = entity.getColumnId();
        if (columnId != null) {
            stmt.bindString(15, columnId);
        }
 
        String contentId = entity.getContentId();
        if (contentId != null) {
            stmt.bindString(16, contentId);
        }
 
        String accessTime = entity.getAccessTime();
        if (accessTime != null) {
            stmt.bindString(17, accessTime);
        }
 
        String stayTime = entity.getStayTime();
        if (stayTime != null) {
            stmt.bindString(18, stayTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(19, endTime);
        }
 
        String extendField = entity.getExtendField();
        if (extendField != null) {
            stmt.bindString(20, extendField);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserEventBean entity) {
        stmt.clearBindings();
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(1, userId);
        }
 
        String accessSrc = entity.getAccessSrc();
        if (accessSrc != null) {
            stmt.bindString(2, accessSrc);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(3, deviceId);
        }
 
        String deviceType = entity.getDeviceType();
        if (deviceType != null) {
            stmt.bindString(4, deviceType);
        }
 
        String brand = entity.getBrand();
        if (brand != null) {
            stmt.bindString(5, brand);
        }
 
        String deviceOs = entity.getDeviceOs();
        if (deviceOs != null) {
            stmt.bindString(6, deviceOs);
        }
 
        String osVer = entity.getOsVer();
        if (osVer != null) {
            stmt.bindString(7, osVer);
        }
 
        String appVer = entity.getAppVer();
        if (appVer != null) {
            stmt.bindString(8, appVer);
        }
 
        String carrier = entity.getCarrier();
        if (carrier != null) {
            stmt.bindString(9, carrier);
        }
 
        String connType = entity.getConnType();
        if (connType != null) {
            stmt.bindString(10, connType);
        }
 
        String gpsXy = entity.getGpsXy();
        if (gpsXy != null) {
            stmt.bindString(11, gpsXy);
        }
 
        String gpsType = entity.getGpsType();
        if (gpsType != null) {
            stmt.bindString(12, gpsType);
        }
 
        String ipAddr = entity.getIpAddr();
        if (ipAddr != null) {
            stmt.bindString(13, ipAddr);
        }
 
        String contentType = entity.getContentType();
        if (contentType != null) {
            stmt.bindString(14, contentType);
        }
 
        String columnId = entity.getColumnId();
        if (columnId != null) {
            stmt.bindString(15, columnId);
        }
 
        String contentId = entity.getContentId();
        if (contentId != null) {
            stmt.bindString(16, contentId);
        }
 
        String accessTime = entity.getAccessTime();
        if (accessTime != null) {
            stmt.bindString(17, accessTime);
        }
 
        String stayTime = entity.getStayTime();
        if (stayTime != null) {
            stmt.bindString(18, stayTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(19, endTime);
        }
 
        String extendField = entity.getExtendField();
        if (extendField != null) {
            stmt.bindString(20, extendField);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public UserEventBean readEntity(Cursor cursor, int offset) {
        UserEventBean entity = new UserEventBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // accessSrc
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // deviceId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // deviceType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // brand
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // deviceOs
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // osVer
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // appVer
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // carrier
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // connType
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // gpsXy
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // gpsType
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // ipAddr
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // contentType
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // columnId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // contentId
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // accessTime
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // stayTime
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // endTime
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // extendField
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserEventBean entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAccessSrc(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeviceId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDeviceType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBrand(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDeviceOs(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOsVer(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAppVer(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCarrier(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setConnType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setGpsXy(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setGpsType(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIpAddr(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setContentType(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setColumnId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setContentId(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setAccessTime(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setStayTime(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setEndTime(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setExtendField(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(UserEventBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(UserEventBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(UserEventBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
